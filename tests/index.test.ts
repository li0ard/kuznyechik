import { test, expect, describe } from "bun:test"
import { Kuznyechik } from "../src"

const key = Buffer.from("8899AABBCCDDEEFF0011223344556677FEDCBA98765432100123456789ABCDEF", "hex")

describe("Transformation S", () => {
    let test_cases = [
        [
            new Uint8Array([0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00]),
            new Uint8Array([0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc])
        ],
        [
            new Uint8Array([0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc]),
            new Uint8Array([0x55, 0x9d, 0x8d, 0xd7, 0xbd, 0x06, 0xcb, 0xfe, 0x7e, 0x7b, 0x26, 0x25, 0x23, 0x28, 0x0d, 0x39])
        ],
        [
            new Uint8Array([0x55, 0x9d, 0x8d, 0xd7, 0xbd, 0x06, 0xcb, 0xfe, 0x7e, 0x7b, 0x26, 0x25, 0x23, 0x28, 0x0d, 0x39]),
            new Uint8Array([0x0c, 0x33, 0x22, 0xfe, 0xd5, 0x31, 0xe4, 0x63, 0x0d, 0x80, 0xef, 0x5c, 0x5a, 0x81, 0xc5, 0x0b])
        ],
        [
            new Uint8Array([0x0c, 0x33, 0x22, 0xfe, 0xd5, 0x31, 0xe4, 0x63, 0x0d, 0x80, 0xef, 0x5c, 0x5a, 0x81, 0xc5, 0x0b]),
            new Uint8Array([0x23, 0xae, 0x65, 0x63, 0x3f, 0x84, 0x2d, 0x29, 0xc5, 0xdf, 0x52, 0x9c, 0x13, 0xf5, 0xac, 0xda])
        ]
    ]
    test("Normal", () => {
        for(let i of test_cases) {
            let input = i[0].slice()
            const cipher = new Kuznyechik(key)
            expect(cipher.transformS(input)).toStrictEqual(i[1])
        }
    })
    
    test("Reverse", () => {
        for(let i of test_cases) {
            let input = i[1].slice()
            const cipher = new Kuznyechik(key)
            expect(cipher.transformS_rev(input)).toStrictEqual(i[0])
        }
    })
})

test("GF multiply", () => {
    let test_cases = [
        [10, 20, 136],
        [20, 10, 136],
        [80, 36, 17],
        [36, 80, 17],
        [255, 255, 6],
        [0, 255, 0],
        [1, 2, 2],
        [24, 62, 85],
        [85, 27, 11],
        [90, 12, 62],
    ]
    for(let [a, b, expected] of test_cases) {
        const cipher = new Kuznyechik(key)
        expect(cipher.gfMultiply(a, b)).toBe(expected)
    }
})

describe("Transformation R", () => {
    let test_cases = [
        [
            new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00]),
            new Uint8Array([0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01])
        ],
        [
            new Uint8Array([0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]),
            new Uint8Array([0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        ],
        [
            new Uint8Array([0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
            new Uint8Array([0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        ],
        [
            new Uint8Array([0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
            new Uint8Array([0x0d, 0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        ]
    ]

    test("Normal", () => {
        for(let i of test_cases) {
            let input = i[0].slice()
            const cipher = new Kuznyechik(key)
            expect(cipher.transformR(input)).toStrictEqual(i[1])
        }
    })

    test("Reverse", () => {
        for(let i of test_cases) {
            let input = i[1].slice()
            const cipher = new Kuznyechik(key)
            expect(cipher.transformR_rev(input)).toStrictEqual(i[0])
        }
    })
})

describe("Transformation L", () => {
    let test_cases = [
        [
            new Uint8Array([0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
            new Uint8Array([0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d])
        ],
        [
            new Uint8Array([0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d]),
            new Uint8Array([0x79, 0xd2, 0x62, 0x21, 0xb8, 0x7b, 0x58, 0x4c, 0xd4, 0x2f, 0xbc, 0x4f, 0xfe, 0xa5, 0xde, 0x9a])
        ],
        [
            new Uint8Array([0x79, 0xd2, 0x62, 0x21, 0xb8, 0x7b, 0x58, 0x4c, 0xd4, 0x2f, 0xbc, 0x4f, 0xfe, 0xa5, 0xde, 0x9a]),
            new Uint8Array([0x0e, 0x93, 0x69, 0x1a, 0x0c, 0xfc, 0x60, 0x40, 0x8b, 0x7b, 0x68, 0xf6, 0x6b, 0x51, 0x3c, 0x13])
        ],
        [
            new Uint8Array([0x0e, 0x93, 0x69, 0x1a, 0x0c, 0xfc, 0x60, 0x40, 0x8b, 0x7b, 0x68, 0xf6, 0x6b, 0x51, 0x3c, 0x13]),
            new Uint8Array([0xe6, 0xa8, 0x09, 0x4f, 0xee, 0x0a, 0xa2, 0x04, 0xfd, 0x97, 0xbc, 0xb0, 0xb4, 0x4b, 0x85, 0x80])
        ]
    ]
    test("Normal", () => {
        for(let i of test_cases) {
            let input = i[0].slice()
            const cipher = new Kuznyechik(key)
            expect(cipher.transformL(input)).toStrictEqual(i[1])
        }
    })

    test("Reverse", () => {
        for(let i of test_cases) {
            let input = i[1].slice()
            const cipher = new Kuznyechik(key)
            expect(cipher.transformL_rev(input)).toStrictEqual(i[0])
        }
    })
})

test("Round keys", () => {
    let expected = [
        new Uint8Array([0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77]),
        new Uint8Array([0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef]),
        new Uint8Array([0xdb, 0x31, 0x48, 0x53, 0x15, 0x69, 0x43, 0x43, 0x22, 0x8d, 0x6a, 0xef, 0x8c, 0xc7, 0x8c, 0x44]),
        new Uint8Array([0x3d, 0x45, 0x53, 0xd8, 0xe9, 0xcf, 0xec, 0x68, 0x15, 0xeb, 0xad, 0xc4, 0x0a, 0x9f, 0xfd, 0x04]),
        new Uint8Array([0x57, 0x64, 0x64, 0x68, 0xc4, 0x4a, 0x5e, 0x28, 0xd3, 0xe5, 0x92, 0x46, 0xf4, 0x29, 0xf1, 0xac]),
        new Uint8Array([0xbd, 0x07, 0x94, 0x35, 0x16, 0x5c, 0x64, 0x32, 0xb5, 0x32, 0xe8, 0x28, 0x34, 0xda, 0x58, 0x1b]),
        new Uint8Array([0x51, 0xe6, 0x40, 0x75, 0x7e, 0x87, 0x45, 0xde, 0x70, 0x57, 0x27, 0x26, 0x5a, 0x00, 0x98, 0xb1]),
        new Uint8Array([0x5a, 0x79, 0x25, 0x01, 0x7b, 0x9f, 0xdd, 0x3e, 0xd7, 0x2a, 0x91, 0xa2, 0x22, 0x86, 0xf9, 0x84]),
        new Uint8Array([0xbb, 0x44, 0xe2, 0x53, 0x78, 0xc7, 0x31, 0x23, 0xa5, 0xf3, 0x2f, 0x73, 0xcd, 0xb6, 0xe5, 0x17]),
        new Uint8Array([0x72, 0xe9, 0xdd, 0x74, 0x16, 0xbc, 0xf4, 0x5b, 0x75, 0x5d, 0xba, 0xa8, 0x8e, 0x4a, 0x40, 0x43]),
    ]
    let cipher = new Kuznyechik(key)
    let result = cipher.getRoundKeys()
    for(let i = 0; i < 10; i++) {
        expect(result[i]).toStrictEqual(expected[i])
    }
})